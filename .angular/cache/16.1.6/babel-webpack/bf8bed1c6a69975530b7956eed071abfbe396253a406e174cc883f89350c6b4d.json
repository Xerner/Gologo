{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Vector2 } from 'src/library/vectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"playerCanvas\"];\nconst _c1 = function (a0, a1) {\n  return {\n    \"width.px\": a0,\n    \"height.px\": a1,\n    \"border\": \"1px solid red\",\n    \"image-rendering\": \"pixelated\"\n  };\n};\nexport class CanvasProviderComponent {\n  constructor() {\n    this.onCanvasReady = new EventEmitter();\n    // Galaga original resolution is 288x224\n    this.aspectRatio = 224 / 288;\n    this.resolution = new Vector2(224, 288);\n    this.size = new Vector2(224, 288);\n    this.onSizeChange = new EventEmitter();\n    this.canvas = null;\n  }\n  ngOnInit() {\n    this.onSizeChange.subscribe(size => this.size = size);\n  }\n  ngAfterViewInit() {\n    if (this.canvas === null) throw new Error(\"canvas is \" + this.canvas);\n    var context = this.canvas.nativeElement.getContext(\"2d\");\n    if (context === null) throw new Error(\"CanvasRenderingContext2D is \" + this.context);\n    this.context = context;\n    this.context.imageSmoothingEnabled = false;\n    setTimeout(this.setCanvasSize.bind(this), 0);\n    this.onCanvasReady.emit(this);\n  }\n  onResize(event) {\n    this.setCanvasSize();\n  }\n  setCanvasSize() {\n    var size = new Vector2(window.innerHeight * this.aspectRatio, window.innerHeight - 10);\n    this.onSizeChange.emit(size);\n  }\n}\nCanvasProviderComponent.ɵfac = function CanvasProviderComponent_Factory(t) {\n  return new (t || CanvasProviderComponent)();\n};\nCanvasProviderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CanvasProviderComponent,\n  selectors: [[\"app-canvas-provider\"]],\n  viewQuery: function CanvasProviderComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  hostBindings: function CanvasProviderComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function CanvasProviderComponent_resize_HostBindingHandler($event) {\n        return ctx.onResize($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  outputs: {\n    onCanvasReady: \"onCanvasReady\"\n  },\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"width\", \"height\", \"ngStyle\"], [\"playerCanvas\", \"\"]],\n  template: function CanvasProviderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"canvas\", 0, 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"width\", ctx.resolution.x)(\"height\", ctx.resolution.y)(\"ngStyle\", i0.ɵɵpureFunction2(3, _c1, ctx.size.x, ctx.size.y));\n    }\n  },\n  dependencies: [i1.NgStyle],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EventEmitter","Vector2","CanvasProviderComponent","constructor","onCanvasReady","aspectRatio","resolution","size","onSizeChange","canvas","ngOnInit","subscribe","ngAfterViewInit","Error","context","nativeElement","getContext","imageSmoothingEnabled","setTimeout","setCanvasSize","bind","emit","onResize","event","window","innerHeight","selectors","viewQuery","CanvasProviderComponent_Query","rf","ctx","$event","i0","ɵɵresolveWindow","ɵɵelement","ɵɵproperty","x","y","ɵɵpureFunction2","_c1"],"sources":["C:\\Users\\km629\\Desktop\\Other\\Gologo\\src\\app\\components\\canvas-controller\\canvas-provider.component.ts","C:\\Users\\km629\\Desktop\\Other\\Gologo\\src\\app\\components\\canvas-controller\\canvas-provider.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { GameObjectService } from 'src/app/services/game-object.service';\nimport { Vector2 } from 'src/library/vectors';\n\n@Component({\n  selector: 'app-canvas-provider',\n  templateUrl: './canvas-provider.component.html',\n  styleUrls: ['./canvas-provider.component.sass']\n})\nexport class CanvasProviderComponent implements OnInit, AfterViewInit {\n    @Output() onCanvasReady = new EventEmitter<CanvasProviderComponent>();\n    // Galaga original resolution is 288x224\n    aspectRatio = 224 / 288;\n    resolution = new Vector2(224, 288);\n    size = new Vector2(224, 288);\n    onSizeChange = new EventEmitter<Vector2>();\n    @ViewChild('playerCanvas') canvas: ElementRef<HTMLCanvasElement> | null = null;\n    context!: CanvasRenderingContext2D;\n\n    ngOnInit() {\n        this.onSizeChange.subscribe((size) => this.size = size)\n    }\n\n    ngAfterViewInit(): void {\n        if (this.canvas === null) throw new Error(\"canvas is \" + this.canvas);\n        var context = this.canvas.nativeElement.getContext(\"2d\");\n        if (context === null) throw new Error(\"CanvasRenderingContext2D is \" + this.context);\n        this.context = context\n        this.context.imageSmoothingEnabled = false;\n        setTimeout(this.setCanvasSize.bind(this), 0);\n        this.onCanvasReady.emit(this);\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event: any) {\n        this.setCanvasSize()\n    }\n\n    setCanvasSize() {\n        var size = new Vector2(window.innerHeight * this.aspectRatio, window.innerHeight - 10)\n        this.onSizeChange.emit(size);\n    }\n}\n","<canvas\n  #playerCanvas\n  [width]=\"resolution.x\"\n  [height]=\"resolution.y\"\n  [ngStyle]=\"{\n    'width.px': size.x,\n    'height.px': size.y,\n    'border': '1px solid red',\n    'image-rendering': 'pixelated',\n  }\"\n></canvas>\n"],"mappings":"AAAA,SAA+CA,YAAY,QAAwD,eAAe;AAElI,SAASC,OAAO,QAAQ,qBAAqB;;;;;;;;;;;;AAO7C,OAAM,MAAOC,uBAAuB;EALpCC,YAAA;IAMc,KAAAC,aAAa,GAAG,IAAIJ,YAAY,EAA2B;IACrE;IACA,KAAAK,WAAW,GAAG,GAAG,GAAG,GAAG;IACvB,KAAAC,UAAU,GAAG,IAAIL,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAClC,KAAAM,IAAI,GAAG,IAAIN,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAC5B,KAAAO,YAAY,GAAG,IAAIR,YAAY,EAAW;IACf,KAAAS,MAAM,GAAyC,IAAI;;EAG9EC,QAAQA,CAAA;IACJ,IAAI,CAACF,YAAY,CAACG,SAAS,CAAEJ,IAAI,IAAK,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAC;EAC3D;EAEAK,eAAeA,CAAA;IACX,IAAI,IAAI,CAACH,MAAM,KAAK,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,YAAY,GAAG,IAAI,CAACJ,MAAM,CAAC;IACrE,IAAIK,OAAO,GAAG,IAAI,CAACL,MAAM,CAACM,aAAa,CAACC,UAAU,CAAC,IAAI,CAAC;IACxD,IAAIF,OAAO,KAAK,IAAI,EAAE,MAAM,IAAID,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAACC,OAAO,CAAC;IACpF,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACA,OAAO,CAACG,qBAAqB,GAAG,KAAK;IAC1CC,UAAU,CAAC,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5C,IAAI,CAAChB,aAAa,CAACiB,IAAI,CAAC,IAAI,CAAC;EACjC;EAGAC,QAAQA,CAACC,KAAU;IACf,IAAI,CAACJ,aAAa,EAAE;EACxB;EAEAA,aAAaA,CAAA;IACT,IAAIZ,IAAI,GAAG,IAAIN,OAAO,CAACuB,MAAM,CAACC,WAAW,GAAG,IAAI,CAACpB,WAAW,EAAEmB,MAAM,CAACC,WAAW,GAAG,EAAE,CAAC;IACtF,IAAI,CAACjB,YAAY,CAACa,IAAI,CAACd,IAAI,CAAC;EAChC;;AAhCSL,uBAAuB,C;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB,C;QAAvBA,uBAAuB;EAAAwB,SAAA;EAAAC,SAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;;;;;;;;;;eAAvBC,GAAA,CAAAR,QAAA,CAAAS,MAAA,CAAgB;MAAA,UAAAC,EAAA,CAAAC,eAAA;;;;;;;;;;;MCT7BD,EAAA,CAAAE,SAAA,mBAUU;;;MARRF,EAAA,CAAAG,UAAA,UAAAL,GAAA,CAAAxB,UAAA,CAAA8B,CAAA,CAAsB,WAAAN,GAAA,CAAAxB,UAAA,CAAA+B,CAAA,aAAAL,EAAA,CAAAM,eAAA,IAAAC,GAAA,EAAAT,GAAA,CAAAvB,IAAA,CAAA6B,CAAA,EAAAN,GAAA,CAAAvB,IAAA,CAAA8B,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}